BasedOnStyle: Google


### Desc: The number of columns to use for indentation.
### Values: (unsigned)
IndentWidth: 4


---
################################################################
#                            Cpp                               #
################################################################
### Desc: this format style is targeted at.
### Values: None / Cpp / CSharp / Java / JavaScript / ObjC / Proto / TableGen / TextProto
Language: Cpp


### Desc: The extra indent or outdent of access modifiers, e.g. public:.
### Values: (int)
AccessModifierOffset: -4


### Desc: If true, horizontally aligns arguments after an open bracket.
### Values: Align / DontAlign / AlwaysBreak
#AlignAfterOpenBracket: Align


### Desc: If true, aligns consecutive assignments.
### Values: true / false
AlignConsecutiveAssignments: false


### Desc: If true, aligns consecutive declarations.
### Values: true / false
#AlignConsecutiveDeclarations: true


###### Not Supported !!
### Desc: If true, aligns consecutive C/C++ preprocessor macros.
### Values: true / false
#AlignConsecutiveMacros: true


### Desc: Options for aligning backslashes in escaped newlines.
### Values: DontAlign / Left / Right
#AlignEscapedNewlines: Right


### Desc: If true, horizontally align operands of binary and ternary expressions.
### Values: true / false
#AlignOperands: true


### Desc: If true, aligns trailing comments.
### Values: true / false
AlignTrailingComments: false


###### Not Supported !!
### Desc: If a function call or braced initializer list doesn't fit on a line,
###       allow putting all arguments onto the next line, even if BinPackArguments is false.
### Values: true / false
#AllowAllArgumentsOnNextLine: true


###### Not Supported !!
### Desc: If a constructor definition with a member initializer list doesn't fit on a single line,
###       allow putting all member initializers onto the next line, if `ConstructorInitializerAllOnOneLineOrOnePerLine` is true.
### Values: true / false
#AllowAllConstructorInitializersOnNextLine: true


### Desc: If the function declaration doesn't fit on a line,
###       allow putting all parameters of a function declaration onto the next line even if BinPackParameters is false.
### Values: true / false
AllowAllParametersOfDeclarationOnNextLine: false


###### Not Supported !!
### Desc: Dependent on the value, while (true) { continue; } can be put on a single line.
### Values: Never / Empty / Always
#AllowShortBlocksOnASingleLine: Never


### Desc: If true, short case labels will be contracted to a single line.
### Values: true / false
AllowShortCaseLabelsOnASingleLine: false


### Desc: Dependent on the value, int f() { return 0; } can be put on a single line.
### Values: None / InlineOnly / Empty / Inline / All
AllowShortFunctionsOnASingleLine: Empty


###### Not Supported
### Desc: If true, if (a) return; can be put on a single line.
### Values: Never / WithoutElse / Always
#AllowShortIfStatementsOnASingleLine: Never


### Desc: Dependent on the value, auto lambda []() { return 0; } can be put on a single line.
### Values: None / Empty / Inline / All
#AllowShortLambdasOnASingleLine:


### Desc: If true, while (true) continue; can be put on a single line.
### Values: true / false
AllowShortLoopsOnASingleLine: false


###### Deprecated !!
### Desc: The function definition return type breaking style to use. This option is deprecated and is retained for backwards compatibility.
### Values: None / All / TopLevel
#AlwaysBreakAfterDefinitionReturnType: All


### Desc: The function declaration return type breaking style to use.
### Values: None / All / TopLevel / AllDefinitions / TopLevelDefinitions
AlwaysBreakAfterReturnType: None


### Desc: If true, always break before multiline string literals.
### Values: true / false
AlwaysBreakBeforeMultilineStrings: false


###### Not Supported !!
### Desc: The template declaration breaking style to use.
### Values: No / MultiLine / Yes
#AlwaysBreakTemplateDeclarations: No


### Desc: If false, a function call's arguments will either be all on the same line or will have one line each.
### Values: true / false
BinPackArguments: true


### Desc: If false, a function declaration's or function definition's parameters will either all be on the same line or will have one line each.
### Values: true / false
BinPackParameters: true


### Desc: The brace breaking style to use.
### Values: Attach / Linux / Mozilla / Stroustrup / Allman / Whitesmiths / GNU / WebKit / Custom
BreakBeforeBraces: Attach


### Desc: If BreakBeforeBraces is set to BS_Custom, use this to specify how each individual brace case should be handled. Otherwise, this is ignored.
### Values: AfterCaseLabel: true / false ---> Not Supported
###         AfterClass: true / false
###         AfterControlStatement: Never / MultiLine / Always ---> Not Supported
###         AfterEnum: true / false
###         AfterFunction: true / false
###         AfterNamespace: true / false
###         AfterObjCDeclaration: true / false
###         AfterStruct: true / false
###         AfterUnion: true / false
###         AfterExternBlock: true / false
###         BeforeCatch: true / false
###         BeforeElse: true / false
###         BeforeLambdaBody: true / false ---> Not Supported
###         IndentBraces: true / false
###         SplitEmptyFunction: true / false
###         SplitEmptyRecord: true / false
###         SplitEmptyNamespace: true / false
#BraceWrapping:
#  AfterCaseLabel: true
#  AfterClass: true
#  AfterControlStatement: Never
#  AfterEnum: true
#  AfterFunction: true
#  AfterNamespace: true
#  AfterObjCDeclaration: true
#  AfterStruct: true
#  AfterUnion: true
#  AfterExternBlock: true
#  BeforeCatch: true
#  BeforeElse: true
#  BeforeLambdaBody: true
#  IndentBraces: true
#  SplitEmptyFunction: true
#  SplitEmptyRecord: true
#  SplitEmptyNamespace: true


### Desc: The way to wrap binary operators.
### Values: None / NonAssignment / All
#BreakBeforeBinaryOperators: None


### Desc: If true, ternary operators will be placed after line breaks.
### Values: true / false
BreakBeforeTernaryOperators: true


### Desc: The constructor initializers style to use.
### Values: BeforeColon / BeforeComma / AfterColon
BreakConstructorInitializers: AfterColon


###### Not Supported !!
### Desc: The inheritance list style to use.
### Values: BeforeColon / BeforeComma / AfterColon
#BreakInheritanceList: AfterColon


###### Not Supported !!
### Desc: The inheritance list style to use.
### Values: true / false
#BreakStringLiterals false


### Desc: The column limit. A column limit of 0 means that there is no column limit.
### Values: (unsigned)
ColumnLimit: 132


### Desc: A regular expression that describes comments with special meaning, which should not be split into lines or otherwise changed.
### Values: (regex)
#CommentPragmas: '^\\.+'


### Desc: If true, consecutive namespace declarations will be on the same line. If false, each namespace is declared on a new line.
### Values: true / false
CompactNamespaces: false


### Desc: If the constructor initializers don't fit on a line, put each initializer on its own line.
### Values: true / false
ConstructorInitializerAllOnOneLineOrOnePerLine: false


### Desc: The number of characters to use for indentation of constructor initializer lists as well as inheritance lists.
### Values: (unsigned)
#ConstructorInitializerIndentWidth:


### Desc: Indent width for line continuations.
### Values: (unsigned)
ContinuationIndentWidth: 8


### Desc: If true, format braced lists as best suited for C++11 braced lists.
### Values: true / false
Cpp11BracedListStyle: true


###### Not Supported !!
### Desc: Analyze the formatted file for the most used line ending (\r\n or \n). UseCRLF is only used as a fallback if none can be derived.
### Values: true / false
#DeriveLineEnding: true


### Desc: If true, analyze the formatted file for the most common alignment of & and *.
###       Pointer and reference alignment styles are going to be updated according to the preferences found in the file.
### Values: true / false
DerivePointerAlignment: false


### Desc: Disables formatting completely.
### Values: true / false
DisableFormat: false


### Desc: If true, clang-format detects whether function calls and definitions are formatted with one parameter per line.
### Values: true / false
#ExperimentalAutoDetectBinPacking: true


### Desc: If true, clang-format adds missing namespace end comments and fixes invalid existing ones.
### Values: true / false
FixNamespaceComments: false


### Desc: A vector of macros that should be interpreted as foreach loops instead of as function calls.
### Values: (vector<string>)
#ForEachMacros: ['RANGES_FOR', 'FOREACH']


### Desc: Dependent on the value, multiple #include blocks can be sorted as one and divided based on category.
### Values: Preserve / Merge / Regroup
IncludeBlocks: Preserve


###### Not Supported !!
### Desc: Regular expressions denoting the different #include categories used for ordering #includes. POSIX extended regular expressions are supported.
### Values: Preserve / Merge / Regroup
#IncludeCategories:
#  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
#    Priority:        2
#    SortPriority:    2
#  - Regex:           '^(<|"(gtest|gmock|isl|json)/)'
#    Priority:        3
#  - Regex:           '<[[:alnum:].]+>'
#    Priority:        4
#  - Regex:           '.*'
#    Priority:        1
#    SortPriority:    0


### Desc: Specify a regular expression of suffixes that are allowed in the file-to-main-include mapping.
### Values: (string)
#IncludeIsMainRegex:


### Desc: Specify a regular expression for files being formatted that are allowed to be considered "main" in the file-to-main-include mapping.
### Values: (string)
#IncludeIsMainSourceRegex:


###### Not Supported !!
### Desc: Indent case label blocks one level from the case label.
### Values: true / false
#IndentCaseBlocks: true


### Desc: Indent case labels one level from the switch statement.
### Values: true / false
IndentCaseLabels: true


###### Not Supported !!
### Desc: Indent goto labels.
### Values: true / false
#IndentGotoLabels: false


### Desc: Indent goto labels.
### Values: None / AfterHash / BeforeHash
IndentPPDirectives: None


### Desc: Indent if a function definition or declaration is wrapped after the type.
### Values: true / false
IndentWrappedFunctionNames: false


### Desc: If true, the empty line at the start of blocks is kept.
### Values: true / false
KeepEmptyLinesAtTheStartOfBlocks: false


### Desc: A regular expression matching macros that start a block.
### Values: (regex)
#MacroBlockBegin:


### Desc: A regular expression matching macros that end a block.
### Values: (regex)
#MacroBlockEnd:


### Desc: The maximum number of consecutive empty lines to keep.
### Values: (unsigned)
#MaxEmptyLinesToKeep: 1


### Desc: The indentation used for namespaces.
### Values: None / Inner / All
NamespaceIndentation: None


### Desc: A vector of macros which are used to open namespace blocks.
### Values: (vector<string>)
#NamespaceMacros:


### Desc: The penalty for breaking around an assignment operator.
### Values: (unsigned)
#PenaltyBreakAssignment:


### Desc: The penalty for breaking around an assignment operator.
### Values: (unsigned)
#PenaltyBreakBeforeFirstCallParameter:


### Desc: The penalty for each line break introduced inside a comment.
### Values: (unsigned)
#PenaltyBreakComment:


### Desc: The penalty for breaking before the first <<.
### Values: (unsigned)
#PenaltyBreakFirstLessLess:


### Desc: The penalty for each line break introduced inside a string literal.
### Values: (unsigned)
#PenaltyBreakString:


###### Not Supported !!
### Desc: The penalty for breaking after template declaration.
### Values: (unsigned)
#PenaltyBreakTemplateDeclaration:


### Desc: The penalty for each character outside of the column limit.
### Values: (unsigned)
#PenaltyExcessCharacter:


### Desc: Penalty for putting the return type of a function onto its own line.
### Values: (unsigned)
#PenaltyReturnTypeOnItsOwnLine:


### Desc: Pointer and reference alignment style.
### Values: Left / Right / Middle
PointerAlignment: Left


###### Not Supported !!
### Desc: Defines hints for detecting supported languages code blocks in raw strings.
### Values: (vector<RawStringFormat>)
#RawStringFormats:
#  - Language: TextProto
#      Delimiters:
#        - 'pb'
#        - 'proto'
#      EnclosingFunctions:
#        - 'PARSE_TEXT_PROTO'
#      BasedOnStyle: google
#  - Language: Cpp
#      Delimiters:
#        - 'cc'
#        - 'cpp'
#      BasedOnStyle: llvm
#      CanonicalDelimiter: 'cc'


### Desc: If true, clang-format will attempt to re-flow comments.
### Values: true / false
ReflowComments: false


### Desc: If true, clang-format will sort #includes.
### Values: true / false
SortIncludes: true


### Desc: If true, clang-format will sort using declarations.
### Values: true / false
SortUsingDeclarations: true


### Desc: If true, a space is inserted after C style casts.
### Values: true / false
SpaceAfterCStyleCast: true


###### Not Supported !!
### Desc: If true, a space is inserted after the logical not operator (!).
### Values: true / false
#SpaceAfterLogicalNot: false


### Desc: If true, a space will be inserted after the 'template' keyword.
### Values: true / false
SpaceAfterTemplateKeyword: true


### Desc: If false, spaces will be removed before assignment operators.
### Values: true / false
SpaceBeforeAssignmentOperators: true


### Desc: If true, a space will be inserted before a C++11 braced list used to initialize an object (after the preceding identifier or type).
### Values: true / false
#SpaceBeforeCpp11BracedList: false


###### Not Supported !!
### Desc: If false, spaces will be removed before constructor initializer colon.
### Values: true / false
#SpaceBeforeCtorInitializerColon: true


###### Not Supported !!
### Desc: If false, spaces will be removed before inheritance colon.
### Values: true / false
#SpaceBeforeInheritanceColon: true


### Desc: Defines in which cases to put a space before opening parentheses.
### Values: Never / ControlStatements / NonEmptyParentheses / Always
SpaceBeforeParens: ControlStatements


###### Not Supported !!
### Desc: If false, spaces will be removed before range-based for loop colon.
### Values: true / false
#SpaceBeforeRangeBasedForLoopColon: true


###### Not Supported !!
### Desc: If true, spaces will be before [. Lambdas will not be affected. Only the first [ will get a space added.
### Values: true / false
#SpaceBeforeSquareBrackets: false


###### Not Supported !!
### Desc: If true, spaces will be inserted into {}.
### Values: true / false
#SpaceInEmptyBlock: false


### Desc: If true, spaces may be inserted into ().
### Values: true / false
SpaceInEmptyParentheses: false


### Desc: The number of spaces before trailing line comments (// - comments).
### Values: (unsigned)
#SpacesBeforeTrailingComments: 2


### Desc: If true, spaces will be inserted after < and before > in template argument lists.
### Values: true / false
SpacesInAngles: false


### Desc: If true, spaces may be inserted into C style casts.
### Values: true / false
SpacesInCStyleCastParentheses: false


###### Not Supported !!
### Desc: If true, spaces will be inserted around if/for/switch/while conditions.
### Values: true / false
#SpacesInConditionalStatement: false


### Desc: If true, spaces are inserted inside container literals (e.g. ObjC and Javascript array and dict literals).
### Values: true / false
SpacesInContainerLiterals: false


### Desc: If true, spaces will be inserted after ( and before ).
### Values: true / false
SpacesInParentheses: false


### Desc: If true, spaces will be inserted after [ and before ]. Lambdas without arguments or unspecified size array declarations will not be affected.
### Values: true / false
SpacesInSquareBrackets: false


###### Not Supported !!
### Desc: Parse and format C++ constructs compatible with this standard.
### Values: c++03 / c++11 / c++14 / c++17 / c++20 / Latest / Auto
#Standard:


### Desc: A vector of macros that should be interpreted as complete statements.
### Values: (vector<string>)
#StatementMacros:


### Desc: The number of columns used for tab stops.
### Values: (unsigned)
TabWidth: 4


###### Not Supported !!
### Desc: A vector of macros that should be interpreted as type declarations instead of as function calls.
### Values: (vector<string>)
#TypenameMacros: ['STACK_OF', 'LIST']


###### Not Supported !!
### Desc: Use \r\n instead of \n for line breaks. Also used as fallback if DeriveLineEnding is true.
### Values: true / false
#UseCRLF: false


### Desc: The way to use tab characters in the resulting file.
### Values: Never / ForIndentation / ForContinuationAndIndentation / Always
UseTab: false


---
################################################################
#                            Java                              #
################################################################
### Desc: this format style is targeted at.
### Values: None / Cpp / CSharp / Java / JavaScript / ObjC / Proto / TableGen / TextProto
Language: Java


### Desc: Break after each annotation on a field in Java files.
### Values: true / false
#BreakAfterJavaFieldAnnotations: true


### Desc: A vector of prefixes ordered by the desired groups for Java imports.
### Values: (vector<string>)
#JavaImportGroups: ['com.example', 'com', 'org']


---
################################################################
#                         JavaScript                           #
################################################################
### Desc: this format style is targeted at.
### Values: None / Cpp / CSharp / Java / JavaScript / ObjC / Proto / TableGen / TextProto
Language: JavaScript


### Desc: The JavaScriptQuoteStyle to use for JavaScript strings.
### Values: Leave / Single / Double
#JavaScriptQuotes: Single


### Desc: Whether to wrap JavaScript import/export statements.
### Values: true / false
#JavaScriptWrapImports: false


### Desc: to insert trailing commas in container literals (arrays and objects) that wrap across multiple lines.
###       It is currently only available for JavaScript and disabled by default (TCS_None).
### Values: Wrapped / None
#InsertTrailingCommas:


---
################################################################
#                            ObjC                              #
################################################################
### Desc: this format style is targeted at.
### Values: None / Cpp / CSharp / Java / JavaScript / ObjC / Proto / TableGen / TextProto
Language: ObjC


### Desc: Controls bin-packing Objective-C protocol conformance list items into as few lines as possible when they go over ColumnLimit.
### Values: Auto / Always / Never
#ObjCBinPackProtocolList: Auto


### Desc: The number of characters to use for indentation of ObjC blocks.
### Values: (unsigned)
#ObjCBlockIndentWidth: 4


### Desc: Break parameters list into lines when there is nested block parameters in a fuction call.
### Values: true / false
#ObjCBreakBeforeNestedBlockParam: false


### Desc: Add a space after @property in Objective-C, i.e. use @property (readonly) instead of @property(readonly).
### Values: true / false
#ObjCSpaceAfterProperty:


### Desc: Add a space in front of an Objective-C protocol list, i.e. use Foo <Protocol> instead of Foo<Protocol>.
### Values: true / false
#ObjCSpaceBeforeProtocolList:
